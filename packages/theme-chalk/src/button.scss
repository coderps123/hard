@use './mixins/_mixin.scss' as *;
@use './mixins/_var.scss' as *;
@use 'sass:map';
@use './mixins/_button.scss' as *;
@use './common/var.scss' as *;
@use './mixins/function.scss' as *;
@use './common/config.scss' as *;

$button-icon-span-gap: () !default;
$button-icon-span-gap: map.merge(
	(
		'large': 8px,
		'default': 6px,
		'small': 4px
	),
	$button-icon-span-gap
);

@include b(button) {
	@include set-component-css-var('button', $button);
}

@include b(button) {
	display: inline-flex;
	justify-content: center;
	align-items: center;

	height: map.get($input-height, 'default');
	white-space: nowrap;
	cursor: pointer;
	text-align: center;
	box-sizing: border-box;
	outline: none;
	transition: 0.1s;
	font-weight: 500;
	user-select: none;
	vertical-align: middle;
	-webkit-appearance: none;

	color: getCssVar('button', 'text-color');
	background-color: getCssVar('button', 'bg-color');
	border: getCssVar('border');
	border-color: getCssVar('button', 'border-color');

	&:hover {
		color: getCssVar('button', 'hover', 'text-color');
		background-color: getCssVar('button', 'hover', 'bg-color');
		border-color: getCssVar('button', 'hover', 'border-color');
		outline: none;
	}
	&:active {
		color: getCssVar('button', 'active', 'text-color');
		background-color: getCssVar('button', 'active', 'bg-color');
		border-color: getCssVar('button', 'active', 'border-color');
		outline: none;
	}

	> span {
		display: inline-flex;
		align-items: center;
	}

	// & + & {
	// 	margin-left: 12px;
	// }

	// mixins: button-size
	& {
		@include button-size(
			map.get($button-padding-vertical, 'default') - $button-border-width,
			map.get($button-padding-horizontal, 'default') - $button-border-width,
			map.get($button-font-size, 'default'),
			map.get($button-border-radius, 'default')
		);
	}

	& [class*='#{$namespace}-icon'] {
		& + span {
			margin-left: map.get($button-icon-span-gap, 'default');
		}
	}

	@include when(plain) {
		@include css-var-from-global(('button', 'hover', 'text-color'), ('color', 'primary'));
		@include css-var-from-global(('button', 'hover', 'bg-color'), ('fill-color', 'blank'));
		@include css-var-from-global(('button', 'hover', 'border-color'), ('color', 'primary'));
	}

	@include when(round) {
		border-radius: getCssVar('border-radius', 'round');
		-webkit-border-radius: getCssVar('border-radius', 'round');
		-moz-border-radius: getCssVar('border-radius', 'round');
		-ms-border-radius: getCssVar('border-radius', 'round');
		-o-border-radius: getCssVar('border-radius', 'round');
	}

	@include when(circle) {
		width: map.get($input-height, 'default');
		border-radius: getCssVar('border-radius', 'circle');
		padding: map.get($button-padding-vertical, 'default') - $button-border-width;
	}

	@include when(disabled) {
		color: getCssVar('button', 'disabled', 'text-color');
		cursor: not-allowed;
		background-image: none;
		background-color: getCssVar('button', 'disabled', 'bg-color');
		border-color: getCssVar('button', 'disabled', 'border-color');
	}

	@include when(text) {
		color: getCssVar('button', 'text-color');
		background-color: transparent;
		border: 0 solid transparent;

		@include when(disabled) {
			color: getCssVar('button', 'disabled', 'text-color');
			background-color: transparent !important;
		}

		&:not(.is-disabled) {
			&:hover {
				background-color: getCssVar('fill-color', 'light');
			}

			&:active {
				background-color: getCssVar('fill-color');
			}

			@include when(has-bg) {
				background-color: getCssVar('fill-color', 'light');

				&:hover {
					background-color: getCssVar('fill-color');
				}

				&:active {
					background-color: getCssVar('fill-color', 'dark');
				}
			}
		}
	}

	@include when(loading) {
		pointer-events: none;
		position: relative;

		&::before {
			z-index: 1;
			pointer-events: none;
			content: '';
			position: absolute;
			left: -1px;
			top: -1px;
			right: -1px;
			bottom: -1px;
			border-radius: inherit;
			background-color: getCssVar('mask-color', 'extra-light');
		}
	}

	@each $type in (primary, success, warning, danger, info) {
		@include m($type) {
			@include button-variant($type);
		}
	}

	@each $size in (large, small) {
		@include m($size) {
			@include set-css-var-value(('button', 'size'), map.get($input-height, $size));

			height: getCssVar('button', 'size');

			& [class*='#{$namespace}-icon'] {
				& + span {
					margin-left: map.get($button-icon-span-gap, $size);
				}
			}

			& {
				@include button-size(
					map.get($button-padding-vertical, $size) - $button-border-width,
					map.get($button-padding-horizontal, $size) - $button-border-width,
					map.get($button-font-size, $size),
					map.get($button-border-radius, $size)
				);
			}

			@include when(circle) {
				width: getCssVar('button', 'size');
				padding: map.get($button-padding-vertical, $size) - $button-border-width;
			}
		}
	}
}
