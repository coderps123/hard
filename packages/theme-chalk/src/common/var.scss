@use 'sass:map';
@use 'sass:math';
@use '../mixins/function.scss' as *;

// 定义一个函数，用于生成颜色序列
@function generate-colors($color) {
	$color-list: (); // 初始化颜色列表
	@for $i from 1 through 5 {
		// 计算每个颜色的百分比
		$percentage: math.percentage(math.div($i, 5));
		// 将生成的颜色添加到列表中
		$color-list: append($color-list, mix($color, white, $percentage));
	}
	$color-list: append($color-list, $color);
	@for $i from 7 through 10 {
		// 计算每个颜色的百分比
		$percentage: math.percentage(math.div(4, $i));
		// 将生成的颜色添加到列表中
		$color-list: append($color-list, mix($color, black, $percentage));
	}
	@return $color-list;
}

$common-colors: () !default;
$common-colors: map.merge(
	(
		'red': generate-colors(#f5222d),
		'volcano': generate-colors(#fa541c),
		'orange': generate-colors(#fa8c16),
		'gold': generate-colors(#faad14),
		'yellow': generate-colors(#fadb14),
		'lime': generate-colors(#a0d911),
		'green': generate-colors(#52c41a),
		'cyan': generate-colors(#13c2c2),
		'blue': generate-colors(#1677ff),
		'geekblue': generate-colors(#2f54eb),
		'purple': generate-colors(#722ed1),
		'magenta': generate-colors(#eb2f96)
	),
	$common-colors
);

$types: primary, success, warning, danger, error, info;

$colors: () !default;
$colors: map.deep-merge(
	(
		'white': #ffffff,
		'black': #000000,
		'primary': (
			'base': #1890ff
		),
		'success': (
			'base': #52c41a
		),
		'warning': (
			'base': #faad14
		),
		'danger': (
			'base': #f56c6c
		),
		'error': (
			'base': #f5222d
		),
		'info': (
			'base': #909399
		)
	),
	$colors
);

$color-white: map.get($colors, 'white') !default;
$color-black: map.get($colors, 'black') !default;
$color-primary: map.get($colors, 'primary', 'base') !default;
$color-success: map.get($colors, 'success', 'base') !default;
$color-warning: map.get($colors, 'warning', 'base') !default;
$color-danger: map.get($colors, 'danger', 'base') !default;
$color-error: map.get($colors, 'error', 'base') !default;
$color-info: map.get($colors, 'info', 'base') !default;

// https://sass-lang.com/documentation/values/maps#immutability
// mix colors with white/black to generate light/dark level
@mixin set-color-mix-level($type, $number, $mode: 'light', $mix-color: $color-white) {
	$colors: map.deep-merge(
		(
			$type: (
				'#{$mode}-#{$number}': mix($mix-color, map.get($colors, $type, 'base'), math.percentage(math.div($number, 10)))
			)
		),
		$colors
	) !global; // 将局部变量转换为全局变量
}

// $colors.primary.light-i
// --el-color-primary-light-i
// 10% 53a8ff
// 20% 66b1ff
// 30% 79bbff
// 40% 8cc5ff
// 50% a0cfff
// 60% b3d8ff
// 70% c6e2ff
// 80% d9ecff
// 90% ecf5ff
@each $type in $types {
	@for $i from 1 through 9 {
		@include set-color-mix-level($type, $i, 'light', $color-white);
	}
}
// --el-color-primary-dark-2
@each $type in $types {
	@include set-color-mix-level($type, 2, 'dark', $color-black);
}

// Color
$text-color: () !default;
$text-color: map.merge(
	(
		'primary': #303133,
		'regular': #606266,
		'secondary': #909399,
		'placeholder': #a8abb2,
		'disabled': #c0c4cc
	),
	$text-color
);

$fill-color: () !default;
$fill-color: map.merge(
	(
		'': #f0f2f5,
		'light': #f5f7fa,
		'lighter': #fafafa,
		'extra-light': #fafcff,
		'dark': #ebedf0,
		'darker': #e6e8eb,
		'blank': #ffffff
	),
	$fill-color
);

// Border
$border-width: 1px !default;
$border-style: solid !default;
$border-color-hover: getCssVar('text-color', 'disabled') !default;

$border-color: () !default;
$border-color: map.merge(
	(
		'': #dcdfe6,
		'light': #e4e7ed,
		'lighter': #ebeef5,
		'extra-light': #f2f6fc,
		'dark': #d4d7de,
		'darker': #cdd0d6
	),
	$border-color
);

$border-radius: () !default;
$border-radius: map.merge(
	(
		'base': 2px,
		'small': 2px,
		'round': 20px,
		'circle': 100%
	),
	$border-radius
);

// Font
$font-size: () !default;
$font-size: map.merge(
	(
		'extra-large': 20px,
		'large': 18px,
		'medium': 16px,
		'base': 14px,
		'small': 13px,
		'extra-small': 12px
	),
	$font-size
);

// Disable default
$disabled: () !default;
$disabled: map.merge(
	(
		'bg-color': getCssVar('fill-color', 'light'),
		'text-color': getCssVar('text-color', 'placeholder'),
		'border-color': getCssVar('border-color', 'light')
	),
	$disabled
);

// mask
$mask-color: () !default;
$mask-color: map.merge(
	(
		'': rgba(255, 255, 255, 0.9),
		'extra-light': rgba(255, 255, 255, 0.3)
	),
	$mask-color
);

$common-component-size: () !default;
$common-component-size: map.merge(
	(
		'large': 40px,
		'default': 32px,
		'small': 24px
	),
	$common-component-size
);

$input-height: () !default;
$input-height: map.merge($common-component-size, $input-height);

$button: () !default;
$button: map.merge(
	(
		'border-color': getCssVar('border-color'),
		'bg-color': getCssVar('fill-color', 'blank'),
		'text-color': getCssVar('text-color', 'regular'),
		'hover-text-color': getCssVar('color-primary'),
		'hover-bg-color': getCssVar('color-primary', 'light-9'),
		'hover-border-color': getCssVar('color-primary-light-7'),
		'divide-border-color': rgba($color-white, 0.5),
		'active-text-color': getCssVar('button-hover-text-color'),
		'active-border-color': getCssVar('color-primary'),
		'active-bg-color': getCssVar('button', 'hover-bg-color'),
		'disabled-text-color': getCssVar('disabled-text-color'),
		'disabled-bg-color': getCssVar('fill-color', 'blank'),
		'disabled-border-color': getCssVar('border-color-light')
	),
	$button
);

$button-font-size: () !default;
$button-font-size: map.merge(
	(
		'large': getCssVar('font-size', 'base'),
		'default': getCssVar('font-size', 'base'),
		'small': 12px
	),
	$button-font-size
);

$button-border-radius: () !default;
$button-border-radius: map.merge(
	(
		'large': getCssVar('border-radius', 'base'),
		'default': getCssVar('border-radius', 'base'),
		'small': calc(#{getCssVar('border-radius', 'base')} - 1px)
	),
	$button-border-radius
);

$button-border-width: $border-width !default;

$button-padding-vertical: () !default;
$button-padding-vertical: map.merge(
	(
		'large': 13px,
		'default': 9px,
		'small': 6px
	),
	$button-padding-vertical
);

$button-padding-horizontal: () !default;
$button-padding-horizontal: map.merge(
	(
		'large': 20px,
		'default': 16px,
		'small': 12px
	),
	$button-padding-horizontal
);

// Input
$input: () !default;
$input: map.merge(
	(
		'text-color': getCssVar('text-color-regular'),
		'border': getCssVar('border'),
		'border-color': getCssVar('border-color'),
		'bg-color': getCssVar('fill-color', 'blank'),
		'border-radius': getCssVar('border-radius-base'),
		'hover-border-color': getCssVar('border-color-hover'),
		'focus-border-color': getCssVar('color-primary'),
		'width': 100%
	),
	$input
);

$input-disabled: () !default;
$input-disabled: map.merge(
	(
		'fill': getCssVar('disabled-bg-color'),
		'border': getCssVar('disabled-border-color'),
		'text-color': getCssVar('disabled-text-color'),
		'placeholder-color': getCssVar('text-color-placeholder')
	),
	$input-disabled
);

$input-padding-horizontal: () !default;
$input-padding-horizontal: map.merge(
	(
		'large': 16px,
		'default': 12px,
		'small': 8px
	),
	$input-padding-horizontal
);

// Radio
$radio: () !default;
$radio: map.merge(
	(
		'font-size': getCssVar('font-size-base'),
		'text-color': getCssVar('text-color-regular'),
		'font-weight': getCssVar('font-weight-primary'),
		'input-height': 14px,
		'input-width': 14px,
		'input-border-radius': getCssVar('border-radius-circle'),
		'input-bg-color': getCssVar('fill-color', 'blank'),
		'input-border': getCssVar('border'),
		'input-border-color': getCssVar('border-color'),
		'input-border-color-hover': getCssVar('color-primary')
	),
	$radio
);

// Alert
$alert: () !default;
$alert: map.merge(
	(
		'padding': 8px 16px,
		'border-radius-base': getCssVar('border-radius-base'),
		'title-font-size': 14px,
		'title-with-description-font-size': 16px,
		'description-font-size': 14px,
		'close-font-size': 16px,
		'close-customed-font-size': 14px,
		'icon-size': 16px,
		'icon-large-size': 28px
	),
	$alert
);

// Switch
$switch: () !default;
$switch: map.merge(
	(
		'on-color': getCssVar('color-primary'),
		'off-color': getCssVar('border-color')
	),
	$switch
);

// Calendar
$calendar: () !default;
$calendar: map.merge(
	(
		'cell-height': 85px
	),
	$calendar
);
